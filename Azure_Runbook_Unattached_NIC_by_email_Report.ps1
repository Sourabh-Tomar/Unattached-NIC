$TenantId = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"  # Replace with your ID

try {
    Connect-AzAccount -Identity -TenantId $TenantId -ErrorAction Stop
    Write-Output "Connected to Azure using Managed Identity"
} catch {
    Write-Error "Failed to connect using Managed Identity: $_"
    exit
}

$subscriptions = Get-AzSubscription
$ExcludedSubscriptionName = "" 

$report = @()

foreach ($subscription in $subscriptions) {
    if ($ExcludedSubscriptionName -ne "" -and $subscription.Name -eq $ExcludedSubscriptionName) {
        Write-Output "Skipping excluded subscription: $($subscription.Name)"
        continue
    }

    try {
        Write-Output "Switching to subscription: $($subscription.Name)"
        Set-AzContext -SubscriptionId $subscription.Id | Out-Null
    } catch {
        Write-Warning "Could not access subscription: $($subscription.Name). Skipping..."
        continue
    }

    $nics = Get-AzNetworkInterface

    $privateEndpoints = Get-AzPrivateEndpoint
    $peNicIds = @()
    if ($privateEndpoints) {
        foreach ($pe in $privateEndpoints) {
            foreach ($nicRef in $pe.NetworkInterfaces) {
                $peNicIds += $nicRef.Id.ToLower()
            }
        }
    }

    foreach ($nic in $nics) {
        $attachedToVm = $nic.VirtualMachine -ne $null
        $attachedToPe = $peNicIds -contains $nic.Id.ToLower()

        if (-not $attachedToVm -and -not $attachedToPe) {
            $report += [PSCustomObject]@{
                NICName          = $nic.Name
                ResourceGroup    = $nic.ResourceGroupName
                SubscriptionName = $subscription.Name
                Location         = $nic.Location
                PrivateIP        = $nic.IpConfigurations[0].PrivateIpAddress
                AttachedTo       = "None"
            }
        }
    }
}

if ($report.Count -eq 0) {
    Write-Output "$($report.Count) No unattached NICs found across accessible subscriptions."
    $report | Format-Table -AutoSize
} else {
    Write-Output "Found $($report.Count) unattached NIC(s):"
    $report | Format-Table -AutoSize
}

$fromEmailAddress   = "xxxxxxxxxxxxxxxxxxxxxxxxx"
$destEmailAddress   = "xxxxxxxxxxxxxxxxxxxxxxxxx"
$smtpserver         = "smtp.gmail.com"
$SMTPPort           = 587
$subject            = "Unattached NICs Report - $(Get-Date -Format 'yyyy-MM-dd')"

$appPassword = Get-AutomationVariable -Name "GmailAppPassword"

$securePass = ConvertTo-SecureString $appPassword -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($fromEmailAddress, $securePass)

$style = @"
<style>
BODY {background-color:white;}
TABLE {border-width: 1px; border-style: solid; border-collapse: collapse; font-family: Calibri;}
TH {border-width: 1px; padding: 5px; border-style: solid; background-color:LightSeaGreen;}
TD {border-width: 1px; padding: 5px; border-style: solid;}
</style>
"@

$EmailBody = "Hi Team,<br><br>"
$EmailBody += "This is an autogenerated report that shows the list of unattached NICs in all accessible subscriptions.<br><br>"
$htmlTable = $report | ConvertTo-Html -Head $style -Property NICName, ResourceGroup, SubscriptionName, Location, PrivateIP, AttachedTo -PreContent #"<h3>Unattached NICS</h3>"
$EmailBody += $htmlTable
$EmailBody += "<br><br>Thanks and Regards,<br>Your Automation System"

try {
    Send-MailMessage -From $fromEmailAddress `
                     -To $destEmailAddress `
                     -Subject $subject `
                     -Body $EmailBody `
                     -BodyAsHtml `
                     -SmtpServer $smtpserver `
                     -Port $SMTPPort `
                     -UseSsl `
                     -Credential $cred -ErrorAction Stop

    Write-Output "Email sent successfully to $destEmailAddress"
} catch {
    Write-Error "Failed to send email: $($_.Exception.Message)"
}